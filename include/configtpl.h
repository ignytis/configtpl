#ifndef _CONFIGTPL_H
#define _CONFIGTPL_H

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#define CONFIGTPL_FEATURE_SHARED_LIB

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
/**
 *  * @brief Status of configuration building
 */
typedef enum configtpl_BuildStatus {
#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
  CONFIGTPL_BUILD_STATUS_SUCCESS = 0,
#endif
#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
  CONFIGTPL_BUILD_STATUS_ERROR_INVALID_HANDLE = 1,
#endif
#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
  /**
   * Indicates that an error occurred during building the config
   */
  CONFIGTPL_BUILD_STATUS_ERROR_BUILDING = 200,
#endif
#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
  /**
   * An unknown error. Should not occur in general.
   */
  CONFIGTPL_BUILD_STATUS_ERROR_UNKNOWN = 255,
#endif
} configtpl_BuildStatus;
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
typedef unsigned int configtpl_UInt;
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
/**
 * Handle allocated for initialized Config Builder.
 * All operations which invoke the Config Builder should have this handle provided
 */
typedef configtpl_UInt configtpl_CfgBuilderHandle;
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
typedef const char *configtpl_ConstCharPtr;
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
/**
 * Array of two strings
 */
typedef configtpl_ConstCharPtr configtpl_StringKV[2];
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
typedef struct configtpl_Array_StringKV {
  configtpl_StringKV *data;
  configtpl_UInt len;
} configtpl_Array_StringKV;
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
/**
 * Array of key-value pairs
 */
typedef struct configtpl_Array_StringKV configtpl_ArrayStringKV;
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
/**
 *  * @brief Result of configuration building
 */
typedef struct configtpl_BuildResult {
  enum configtpl_BuildStatus status;
  configtpl_ArrayStringKV output;
  configtpl_ConstCharPtr error_msg;
} configtpl_BuildResult;
#endif

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
/**
 * This function should be invoked before any other library routines.
 * Right at the moment it does nothing, but some initialization might be added in the future.
 */
void configtpl_init(void);
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
configtpl_CfgBuilderHandle configtpl_new_config_builder(void);
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
const struct configtpl_BuildResult *configtpl_build_from_files(configtpl_CfgBuilderHandle env_handle,
                                                               configtpl_ConstCharPtr paths,
                                                               const configtpl_ArrayStringKV *overrides,
                                                               const configtpl_ArrayStringKV *ctx);
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
/**
 * Deallocates memory of rendering result object
 */
void configtpl_build_free_result(struct configtpl_BuildResult *r);
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
/**
 * Removes a config builder
 */
void configtpl_free_config_builder(configtpl_CfgBuilderHandle env_handle);
#endif

#if defined(CONFIGTPL_FEATURE_SHARED_LIB)
/**
 * This function should be invoked after any other library routines.
 * /// Right at the moment it does nothing, but some final actions might be added in the future.
 */
void configtpl_unload(void);
#endif

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* _CONFIGTPL_H */
