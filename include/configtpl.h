#ifndef _CONFIGTPL_H
#define _CONFIGTPL_H

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 *  * @brief Status of template rendering
 */
typedef enum configtpl_RenderStatus {
  CONFIGTPL_RENDER_STATUS_SUCCESS = 0,
  CONFIGTPL_RENDER_STATUS_ERROR_INVALID_HANDLE = 1,
  CONFIGTPL_RENDER_STATUS_ERROR_TEMPLATE_RENDER = 2,
  CONFIGTPL_RENDER_STATUS_ERROR_UNKNOWN = 255,
} configtpl_RenderStatus;

typedef unsigned int configtpl_UInt;

/**
 * Handle allocated for initialized Jinja environment.
 * All operations which invoke the Jinja envionment should have this handle provided
 */
typedef configtpl_UInt configtpl_EnrironmentHandle;

typedef const char *configtpl_ConstCharPtr;

typedef size_t configtpl_USize;

/**
 *  * @brief Indicates the place where error occurred.  *   * This structure is copied from inja lib (SourceLocation) in order not to depend on it
 */
typedef struct configtpl_TemplateErrorLocation {
  configtpl_USize line;
  configtpl_USize start;
  configtpl_USize end;
} configtpl_TemplateErrorLocation;

/**
 *  * @brief Result of template rendering
 */
typedef struct configtpl_RenderResult {
  enum configtpl_RenderStatus status;
  configtpl_ConstCharPtr output;
  struct configtpl_TemplateErrorLocation location;
} configtpl_RenderResult;

typedef struct configtpl_Array__________ConstCharPtr__________2 {
  configtpl_ConstCharPtr (*data)[2];
  configtpl_UInt len;
} configtpl_Array__________ConstCharPtr__________2;

/**
 * This function should be invoked before any other library routines.
 * Right at the moment it does nothing, but some initialization might be added in the future.
 */
void configtpl_init(void);

configtpl_EnrironmentHandle configtpl_new_environment(void);

struct configtpl_RenderResult *configtpl_render(configtpl_EnrironmentHandle env_handle,
                                                configtpl_ConstCharPtr tpl,
                                                const struct configtpl_Array__________ConstCharPtr__________2 *context);

/**
 * Deallocates memory of rendering result object
 */
void configtpl_render_free_result(struct configtpl_RenderResult *r);

/**
 * Removes environment
 */
void configtpl_free_environment(configtpl_EnrironmentHandle env_handle);

/**
 * This function should be invoked after any other library routines.
 * /// Right at the moment it does nothing, but some final actions might be added in the future.
 */
void configtpl_unload(void);

#endif  /* _CONFIGTPL_H */
